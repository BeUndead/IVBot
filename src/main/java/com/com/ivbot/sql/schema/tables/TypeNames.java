/**
 * This class is generated by jOOQ
 */
package com.com.ivbot.sql.schema.tables;

import com.com.ivbot.sql.schema.DefaultSchema;
import com.com.ivbot.sql.schema.Keys;
import com.com.ivbot.sql.schema.tables.records.TypeNamesRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@Generated (
        value = {
                "http://www.jooq.org", "jOOQ version:3.6.2"},
        comments = "This class is generated by jOOQ")
@SuppressWarnings ({"all", "unchecked", "rawtypes"})
public class TypeNames extends TableImpl<TypeNamesRecord> {

    /**
     * The reference instance of {@code type_names}
     */
    public static final TypeNames TYPE_NAMES = new TypeNames();
    private static final long serialVersionUID = 368565843;
    /**
     * The column {@code type_names.type_id}.
     */
    public final TableField<TypeNamesRecord, Integer> TYPE_ID =
            createField("type_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column {@code type_names.local_language_id}.
     */
    public final TableField<TypeNamesRecord, Integer> LOCAL_LANGUAGE_ID =
            createField("local_language_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column {@code type_names.name}.
     */
    public final TableField<TypeNamesRecord, String> NAME =
            createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(79).nullable(false), this, "");

    /**
     * Create a {@code type_names} table reference
     */
    public TypeNames() {
        this("type_names", null);
    }

    private TypeNames(String alias, Table<TypeNamesRecord> aliased) {
        this(alias, aliased, null);
    }

    private TypeNames(String alias, Table<TypeNamesRecord> aliased, Field<?>[] parameters) {
        super(alias, DefaultSchema.DEFAULT_SCHEMA, aliased, parameters, "");
    }

    /**
     * Create an aliased {@code type_names} table reference
     */
    public TypeNames(String alias) {
        this(alias, TYPE_NAMES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TypeNamesRecord> getPrimaryKey() {
        return Keys.PK_TYPE_NAMES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TypeNamesRecord>> getKeys() {
        return Arrays.<UniqueKey<TypeNamesRecord>>asList(Keys.PK_TYPE_NAMES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TypeNamesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TypeNamesRecord, ?>>asList(Keys.FK_TYPE_NAMES_TYPES_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TypeNames as(String alias) {
        return new TypeNames(alias, this);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TypeNamesRecord> getRecordType() {
        return TypeNamesRecord.class;
    }

    /**
     * Rename this table
     */
    public TypeNames rename(String name) {
        return new TypeNames(name, null);
    }
}
