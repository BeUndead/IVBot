/**
 * This class is generated by jOOQ
 */
package com.com.ivbot.sql.schema.tables;

import com.com.ivbot.sql.schema.DefaultSchema;
import com.com.ivbot.sql.schema.Keys;
import com.com.ivbot.sql.schema.tables.records.TypeEfficacyRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@Generated (
        value = {
                "http://www.jooq.org", "jOOQ version:3.6.2"},
        comments = "This class is generated by jOOQ")
@SuppressWarnings ({"all", "unchecked", "rawtypes"})
public class TypeEfficacy extends TableImpl<TypeEfficacyRecord> {

    /**
     * The reference instance of {@code type_efficacy}
     */
    public static final TypeEfficacy TYPE_EFFICACY = new TypeEfficacy();
    private static final long serialVersionUID = -831172152;
    /**
     * The column {@code type_efficacy.damage_type_id}.
     */
    public final TableField<TypeEfficacyRecord, Integer> DAMAGE_TYPE_ID =
            createField("damage_type_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column {@code type_efficacy.target_type_id}.
     */
    public final TableField<TypeEfficacyRecord, Integer> TARGET_TYPE_ID =
            createField("target_type_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column {@code type_efficacy.damage_factor}.
     */
    public final TableField<TypeEfficacyRecord, Integer> DAMAGE_FACTOR =
            createField("damage_factor", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a {@code type_efficacy} table reference
     */
    public TypeEfficacy() {
        this("type_efficacy", null);
    }

    private TypeEfficacy(String alias, Table<TypeEfficacyRecord> aliased) {
        this(alias, aliased, null);
    }

    private TypeEfficacy(String alias, Table<TypeEfficacyRecord> aliased, Field<?>[] parameters) {
        super(alias, DefaultSchema.DEFAULT_SCHEMA, aliased, parameters, "");
    }

    /**
     * Create an aliased {@code type_efficacy} table reference
     */
    public TypeEfficacy(String alias) {
        this(alias, TYPE_EFFICACY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TypeEfficacyRecord> getPrimaryKey() {
        return Keys.PK_TYPE_EFFICACY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TypeEfficacyRecord>> getKeys() {
        return Arrays.<UniqueKey<TypeEfficacyRecord>>asList(Keys.PK_TYPE_EFFICACY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TypeEfficacyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TypeEfficacyRecord, ?>>asList(Keys.FK_TYPE_EFFICACY_TYPES_2,
                                                                Keys.FK_TYPE_EFFICACY_TYPES_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TypeEfficacy as(String alias) {
        return new TypeEfficacy(alias, this);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TypeEfficacyRecord> getRecordType() {
        return TypeEfficacyRecord.class;
    }

    /**
     * Rename this table
     */
    public TypeEfficacy rename(String name) {
        return new TypeEfficacy(name, null);
    }
}
