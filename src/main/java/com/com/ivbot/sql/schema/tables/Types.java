/**
 * This class is generated by jOOQ
 */
package com.com.ivbot.sql.schema.tables;

import com.com.ivbot.sql.schema.DefaultSchema;
import com.com.ivbot.sql.schema.Keys;
import com.com.ivbot.sql.schema.tables.records.TypesRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@Generated (
        value = {
                "http://www.jooq.org", "jOOQ version:3.6.2"},
        comments = "This class is generated by jOOQ")
@SuppressWarnings ({"all", "unchecked", "rawtypes"})
public class Types extends TableImpl<TypesRecord> {

    /**
     * The reference instance of {@code types}
     */
    public static final Types TYPES = new Types();
    private static final long serialVersionUID = -1992921287;
    /**
     * The column {@code types.id}.
     */
    public final TableField<TypesRecord, Integer> ID =
            createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column {@code types.identifier}.
     */
    public final TableField<TypesRecord, String> IDENTIFIER =
            createField("identifier", org.jooq.impl.SQLDataType.VARCHAR.length(79).nullable(false), this, "");
    /**
     * The column {@code types.generation_id}.
     */
    public final TableField<TypesRecord, Integer> GENERATION_ID =
            createField("generation_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column {@code types.damage_class_id}.
     */
    public final TableField<TypesRecord, Integer> DAMAGE_CLASS_ID =
            createField("damage_class_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a {@code types} table reference
     */
    public Types() {
        this("types", null);
    }

    private Types(String alias, Table<TypesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Types(String alias, Table<TypesRecord> aliased, Field<?>[] parameters) {
        super(alias, DefaultSchema.DEFAULT_SCHEMA, aliased, parameters, "");
    }

    /**
     * Create an aliased {@code types} table reference
     */
    public Types(String alias) {
        this(alias, TYPES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TypesRecord> getPrimaryKey() {
        return Keys.PK_TYPES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TypesRecord>> getKeys() {
        return Arrays.<UniqueKey<TypesRecord>>asList(Keys.PK_TYPES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TypesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TypesRecord, ?>>asList(Keys.FK_TYPES_GENERATIONS_1,
                                                         Keys.FK_TYPES_MOVE_DAMAGE_CLASSES_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Types as(String alias) {
        return new Types(alias, this);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TypesRecord> getRecordType() {
        return TypesRecord.class;
    }

    /**
     * Rename this table
     */
    public Types rename(String name) {
        return new Types(name, null);
    }
}
